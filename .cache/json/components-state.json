{
    "data": {
        "site": {
            "siteMetadata": {
                "title": "React FAQ",
                "author": "Tim Arney"
            }
        },
        "markdownRemark": {
            "id": "/Users/timarney/Desktop/faq/react-faq/src/pages/components/state.md absPath of file >>> MarkdownRemark",
            "html": "<blockquote>\n<p>In one sense, ‚Äústate‚Äù means the current visual representation of the app on screen‚Ä¶ In the React sense, ‚Äústate‚Äù is an object that represents the parts of the app that can change. Each component can maintain its own state, which lives in an object called this.state. - Dave Ceddia</p>\n</blockquote>\n<p><strong>What is state in React?</strong></p>\n<ul>\n<li><a href=\"https://daveceddia.com/visual-guide-to-state-in-react\">A Visual Guide to State in React</a> Dave Ceddia @dceddia</li>\n</ul>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Must initialize state first</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Increment the count when the button is clicked</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// setState is asynchronous! This function gets called</span>\n      <span class=\"token comment\" spellcheck=\"true\">// when it's finished.</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Job's done\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"app\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"click-count\"</span><span class=\"token operator\">></span>\n          Button presses<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          Add One\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n      </div>\n<h2>Lifting State Up</h2>\n<p><strong>What is lifting up state?</strong></p>\n<ul>\n<li><a href=\"https://facebook.github.io/react/docs/lifting-state-up.html\">Lifting State Up</a></li>\n</ul>\n<h2>Asynchronous Updates &#x26; setState()</h2>\n<ul>\n<li><a href=\"https://medium.learnreact.com/setstate-is-asynchronous-52ead919a3f0\">setState is asynchronous</a> Michael Chan @chantastic</li>\n</ul>\n<p><strong>I heard you can pass a function to setState when should do that?</strong></p>\n<blockquote>\n<p>Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.  ‚Äî Rect Docs</p>\n</blockquote>\n<blockquote>\n<p>If you know you‚Äôre going to use setState to update your component and you know you‚Äôre going to need the current state or the current props of your component to calculate the next state, passing in a function as the first parameter of this.setState instead of an object is the recommended solution. ‚Äî Sophia Shoemaker</p>\n</blockquote>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token comment\" spellcheck=\"true\">// state updates may be asynchronous</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Wrong</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  counter<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Correct</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  counter<span class=\"token punctuation\">:</span> prevState<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>increment\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n      </div>\n<ul>\n<li>üíØ <a href=\"https://medium.freecodecamp.com/functional-setstate-is-the-future-of-react-374f30401b6b#.didjv52tx\">Functional setState is the future of React</a></li>\n</ul>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token comment\" spellcheck=\"true\">// see post :: Using a function in `setState` instead of an object</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// outside your component class</span>\n<span class=\"token keyword\">function</span> increaseScore <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>score <span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>score <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token comment\" spellcheck=\"true\">// inside your component class</span>\n  handleIncreaseScore <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span> increaseScore<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<ul>\n<li><a href=\"https://medium.com/@shopsifter/using-a-function-in-setstate-instead-of-an-object-1f5cfd6e55d1#.h3fokbh9a\">Using a function in <code>setState</code> instead of an object</a> Sophia Shoemaker</li>\n</ul>\n<h2>Handling State</h2>\n<p><strong>How do I handle state?</strong></p>\n<ul>\n<li><a href=\"http://jamesknelson.com/5-types-react-application-state\">The 5 Types Of React Application State</a> James K Nelson @james<em>k</em>nelson</li>\n<li><a href=\"http://jamesknelson.com/state-react-1-stateless-react-app\">State of React #1: A Stateless React App?</a> James K Nelson @james<em>k</em>nelson</li>\n<li><a href=\"https://medium.com/@zackargyle/a-case-for-setstate-1f1c47cd3f73#.w89epdtmo\">A Case for setState</a> Zack Argyle</li>\n<li><a href=\"https://medium.freecodecamp.com/where-do-i-belong-a-guide-to-saving-react-component-data-in-state-store-static-and-this-c49b335e2a00#.8k7tc37cs\">Where to Hold React Component Data: state, store, static, and this</a> Sam Corcos</li>\n<li><a href=\"https://medium.com/react-ecosystem/how-to-handle-state-in-react-6f2d3cd73a0c#.dwz84fx9s\">How to handle state in React. The missing FAQ</a> Osmel Mora @osmel_mora</li>\n<li><a href=\"https://twitter.com/dan_abramov/status/749710501916139520\">Should I keep something in React component state? I made a small cheatsheet.</a> Dan Abramov @dan_abramov</li>\n<li><a href=\"http://brewhouse.io/blog/2015/03/24/best-practices-for-component-state-in-reactjs.html\">Best Practices for Component State in React.js</a> Gabe Scholz @gabescholz</li>\n<li><a href=\"https://www.sitepoint.com/exploring-reacts-state-propagation\">Exploring React‚Äôs State Propagation</a> Eric Greene @ericwgreene</li>\n</ul>\n<p><strong>How can I decouple state and UI?</strong></p>\n<ul>\n<li><a href=\"https://medium.com/@mweststrate/how-to-decouple-state-and-ui-a-k-a-you-dont-need-componentwillmount-cc90b787aa37#.7l8ji1wer\">How to decouple state and UI</a> Michel Weststrate @mweststrate</li>\n</ul>\n<p><strong>Coming from jQuery‚Ä¶ how do I adjust my mental modal to work with React / State?</strong></p>\n<ul>\n<li><a href=\"https://daveceddia.com/thinking-statefully\">Thinking Statefully</a> Dave Ceddia @dceddia</li>\n</ul>\n<blockquote>\n<p><strong>Tip:</strong> ü§î Use derived state when possible see code sample below:</p>\n</blockquote>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">NameWithInitials</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      firstName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n      lastName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Avoid creating state that can be derived from other state.</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Example: The user's initials can be derived from the two items above.</span>\n      initials<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> firstName<span class=\"token punctuation\">,</span> lastName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Instead generate the user's initials on the fly like this.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Or do so in a seperate function above</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        Initials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>firstName<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">{</span>lastName<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>via @housecor - <a href=\"https://twitter.com/housecor/status/839125277842231298\">twitter link</a>.</p>\n<h2>Handling Initial State</h2>\n<p><strong>How do I handle Intial state?</strong></p>\n<p>Use the constructor method also see tip below.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>myVal<span class=\"token punctuation\">:</span> <span class=\"token string\">'val'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<blockquote>\n<p><strong>Tip:</strong> ü§î You don‚Äôt need to declare a constructor in your React component to initialize state via @housecor:</p>\n</blockquote>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token comment\" spellcheck=\"true\">// via @housecor https://twitter.com/housecor/status/866651617998897152</span>\n<span class=\"token comment\" spellcheck=\"true\">// Traditional way</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>myVal<span class=\"token punctuation\">:</span> <span class=\"token string\">'val'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//Using public class field</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        myVal<span class=\"token punctuation\">:</span> <span class=\"token string\">'val'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p><strong>How do I handle making state immutable in React?</strong></p>\n<ul>\n<li><a href=\"https://medium.com/@housecor/handling-state-in-react-four-immutable-approaches-to-consider-d1f5c00249d5\">Handling State in React: Four Immutable Approaches to Consider</a> @housecor</li>\n</ul>\n<p>** Can I add state to function components in React?**</p>\n<ul>\n<li><a href=\"https://medium.com/@dai_shi/attaching-state-to-stateless-function-components-in-react-db317a9e83ad\">Attaching state to stateless function components in React</a> @dai_shi</li>\n</ul>",
            "frontmatter": {
                "title": "State"
            }
        }
    },
    "pathContext": {
        "path": "/components/state/"
    }
}